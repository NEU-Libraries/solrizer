#!/usr/bin/env ruby

require 'rubygems'
require 'optparse'
require 'stomp'
require 'logger'

options = {}

optparse = OptionParser.new do|opts|
  opts.banner = "Usage: solrizer [options]"

  options[:hydra_home] = nil
  opts.on( '--hydra_home PATH', 'Load the Hydra instance  at this path' ) do |path|
    if File.exist?(File.join(path,"config","environment.rb"))
      options[:hydra_home] = path
    else
      puts "#{path} does not appear to be a valid rails home"
      exit
    end
  end

  options[:port] = 61613
  opts.on('-p','--port NUM', 'Stomp port') do |port|
    options[:port] = port
  end

  options[:host] = 'localhost'
  opts.on('-o','--host HOSTNAME', 'Host to connect to') do |host|
    options[:host] = host
  end

  options[:user] = 'fedoraStomper'
  opts.on('-u', '--user USERNAME', 'User name for stomp listener') do |user|
    options[:user] = user
  end

  options[:password] = 'fedoraStomper'
  opts.on('-w', '--password PASSWORD', 'Password for stomp listener') do |password|
    options[:password] = password
  end

  options[:destination] = '/topic/fedora.apim.update'
  opts.on('-d','--destination TOPIC', 'Topic to listen to') do |destination|
    options[:destination] = destination
  end

  options[:solr_url] = nil
  opts.on('-s','--solr_url URL', 'Solr URL to connect to') do |solr_url|
    options[:solr_url] = solr_url
  end
  
  options[:log] = '/home/drs/log/solrizer.log'
  opts.on('-l','--log FILE', 'Where to log solrizer output') do |log_location|
    options[:log] = log_location
  end  

  opts.on('-h', '--help', 'Display this screen') do
    puts opts
    exit
  end
end

optparse.parse!

@logger = Logger.new(options[:log])

begin; require 'rubygems'; rescue; end

if options[:hydra_home]
  puts "Loading app..."
  Dir.chdir(options[:hydra_home])
  require File.join(options[:hydra_home],"config","environment.rb")

  @logger.info "app loaded"
else
  @logger.warn "The --hydra_home PATH option is mandatory. Please provide the path to the root of a valid Hydra instance."
  exit 1
end

if options[:solr_url] == nil
  @logger.warn "The --solr_url URL option is mandatory. Please provide the URL to a valid Solr instance."
  exit 1
end

puts "loading listener"

begin
  @port = options[:port]
  @host = options[:host]
  @user = options[:user]
  @password = options[:password]
  @reliable = true
  @clientid = "fedora_stomper"
  @destination = options[:destination]

  solr_host = options[:solr_url]
  args = {:read_timeout => 120, :open_timeout => 120}
  args.merge!(:url=>solr_host)
  @solr_conn = RSolr.connect args

  @logger.info "Connecting to stomp://#{@host}:#{@port} as #{@user}\n"
  @conn = Stomp::Connection.open(@user, @password, @host, @port, @reliable, 5, {"client-id" => @clientid} )
  @logger.info "Getting output from #{@destination}\n"

  @conn.subscribe(@destination, {"activemq.subscriptionName" => @clientid, :ack =>"client" })
  while true
    @msg = @conn.receive
    pid = @msg.headers["pid"]
    method = @msg.headers["methodName"]

    begin
      if ["addDatastream", "addRelationship","ingest","modifyDatastreamByValue","modifyDatastreamByReference","modifyObject","purgeDatastream","purgeRelationship"].include? method
        # ActiveFedora::Base.find(@msg.headers["pid"], cast: true).update_index
        doc = ActiveFedora::Base.find(@msg.headers["pid"], cast: true).to_solr
        @solr_conn.add(doc)
        @solr_conn.commit
      elsif method == "purgeObject"
        # ActiveFedora::SolrService.instance.conn.delete_by_query "id:\"#{pid}\""
        # ActiveFedora::SolrService.instance.conn.commit
        @solr_conn.delete_by_query "id:\"#{pid}\""
        @solr_conn.commit
      else
        @logger.warn "{Time.now} - Unknown Method: #{method}"
      end
      puts  "updated solr index for #{@msg.headers["pid"]}\n"
    rescue Exception => error
      @logger.warn "#{Time.now} - Error processing \nPID: #{@msg.headers["pid"]}"
      @logger.warn "#{Time.now} - #{$!.inspect}"
      @logger.warn "#{Time.now} - #{$!}"
      @logger.warn "#{Time.now} - #{$@}"
    end
    # Always progress
    @conn.ack @msg.headers["message-id"]
  end
  @conn.join

rescue Exception => e
p e
end

